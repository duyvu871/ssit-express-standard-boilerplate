
version: '3.8'

services:
    postgres:
        image: postgres:14-alpine
        restart: unless-stopped
        env_file:
            - .env
        # ports:
        #     - '${DB_POSTGRES_PORT}:${DB_POSTGRES_PORT}'
        environment:
            TZ: Asia/Ho_Chi_Minh
            POSTGRES_USER: ${DB_POSTGRES_USER}
            POSTGRES_PASSWORD: ${DB_POSTGRES_PASSWORD}
            POSTGRES_DB: ${DB_POSTGRES_DATABASE}
            POSTGRES_HOST_AUTH_METHOD: trust
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        image: 'redis:alpine'
        restart: unless-stopped
        volumes:
            - redis_data:/data
        healthcheck:
            test: [ 'CMD', 'redis-cli', 'ping' ]
            interval: 10s
            timeout: 5s
            retries: 5

    server:
        build:
            context: .
            dockerfile: Dockerfile
        restart: unless-stopped
        ports:
            - '${SERVER_PORT}:${SERVER_PORT}'
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env
        volumes:
            - ./logs:/usr/src/app/logs

volumes:
    postgres_data:
    redis_data:

# To rebuild a specific service:
# docker-compose up -d --no-deps --build --no-cache <service_name>
